

.job_docker_push_variables:
  &job_docker_push_variables
    PYTHON_BIN: /usr/bin/python3
    VERSION_SCRIPT_BIN: mayan/apps/dependencies/versions.py

stages:
  - stage_build_python
  - stage_test_python
  - stage_build_container
  - stage_test_container
  - stage_build_documentation
  - stage_push
  - stage_deploy

# Docker

job_docker_build:
  before_script:
    - set -a && . ./config.env && set +a
    - mkdir --parents ${APK_CACHE_DIR}
    - apk update
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - apk update
    - apk add --cache-dir ${APK_CACHE_DIR} cairo gcc libffi-dev libjpeg-turbo-dev libmagic make musl-dev python3 python3-dev zlib-dev
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install pip==${PYTHON_PIP_VERSION}
    - pip install wheel==${PYTHON_WHEEL_VERSION}
    - pip install --requirement requirements/common.txt
    - cat requirements/base.txt | grep -v 'django-auth-ldap'| pip install -r /dev/stdin
  cache:
    - key: apk-cache-4.6
      paths:
        - ${APK_CACHE_DIR}
    - key: pip-cache-4.6
      paths:
        - ${PIP_CACHE_DIR}
  image: docker:23.0.6-dind
  only:
    - builds/docker
    - releases/all/major
    - releases/all/minor
    - releases/docker/major
    - releases/docker/minor
    - releases/nightly
    - releases/staging
    - tests/all
    - tests/docker
  script:
    - DOCKER_VERSION=`cat docker/rootfs/version`
    - make docker-build DOCKER_IMAGE_MAYAN_NAME=${CI_REGISTRY_IMAGE} IMAGE_VERSION=${DOCKER_VERSION} DOCKER_IMAGE_LABELS_EXTRA='--label com.gitlab.ci.job.id=${CI_JOB_ID} --label com.gitlab.ci.pipeline.id=${CI_PIPELINE_ID} --label org.opencontainers.image.revision=${CI_COMMIT_SHA}'
    - docker push "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}"
  services:
    - docker:23.0.6-dind
  stage: stage_build_container
  variables:
    DOCKER_DRIVER: overlay2
    APK_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apk
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

job_docker_test:
  before_script:
    - set -a && . ./config.env && set +a
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  image: docker:23.0.6-dind
  needs:
    - job_docker_build
  only:
    - releases/all/major
    - releases/all/minor
    - releases/docker/major
    - releases/docker/minor
    - tests/all
    - tests/docker
  script:
    - DOCKER_VERSION=`cat docker/rootfs/version`
    - SERVICE_POSTGRES_IP=$(cat /etc/hosts | awk '{if ($2 == "postgres") print $1;}')
    - docker run --rm --add-host="postgres:${SERVICE_POSTGRES_IP}" -e MAYAN_DATABASES="{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'mayan','USER':'mayan','PASSWORD':'mayandbpass','HOST':'postgres'}}" "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" run_tests
  services:
    - docker:23.0.6-dind
    - postgres:13.14-alpine
  stage: stage_test_container
  tags:
    - postgres
  variables:
    DOCKER_DRIVER: overlay2
    POSTGRES_DB: "mayan"
    POSTGRES_PASSWORD: "mayandbpass"
    POSTGRES_USER: "mayan"

job_docker_push_major:
  before_script:
    - set -a && . ./config.env && set +a
    - mkdir --parents ${APK_CACHE_DIR}
    - apk update
    - apk add --cache-dir ${APK_CACHE_DIR} python3 py3-packaging
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  cache:
    - key: apk-cache-4.6
      paths:
        - ${APK_CACHE_DIR}
  image: docker:23.0.6-dind
  needs:
    - job_docker_test
  only:
    - releases/all/major
    - releases/docker/major
  script:
    - DOCKER_VERSION=`cat docker/rootfs/version`
    - docker pull "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}"
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" registry-1.docker.io/mayanedms/mayanedms:v"${DOCKER_VERSION}"
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" registry-1.docker.io/mayanedms/mayanedms:latest
    - MAJOR_VERSION=$(${PYTHON_BIN} ${VERSION_SCRIPT_BIN} ${DOCKER_VERSION} major);
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" registry-1.docker.io/mayanedms/mayanedms:s"${MAJOR_VERSION}"
    - MINOR_VERSION=$(${PYTHON_BIN} ${VERSION_SCRIPT_BIN} ${DOCKER_VERSION} minor);
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" registry-1.docker.io/mayanedms/mayanedms:s"${MINOR_VERSION}"
    - docker login --username "${DOCKER_HUB_USERNAME}" --password "${DOCKER_HUB_PASSWORD}" https://registry-1.docker.io
    - docker push registry-1.docker.io/mayanedms/mayanedms:v"${DOCKER_VERSION}"
    - docker push registry-1.docker.io/mayanedms/mayanedms:latest
    - docker push registry-1.docker.io/mayanedms/mayanedms:s"${MAJOR_VERSION}"
    - docker push registry-1.docker.io/mayanedms/mayanedms:s"${MINOR_VERSION}"
  services:
    - docker:23.0.6-dind
  stage: stage_push
  variables:
    DOCKER_DRIVER: overlay2
    APK_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apk
    << : *job_docker_push_variables

job_docker_push_minor:
  before_script:
    - set -a && . ./config.env && set +a
    - mkdir --parents ${APK_CACHE_DIR}
    - apk update
    - apk add --cache-dir ${APK_CACHE_DIR} python3 py3-packaging
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  cache:
    - key: apk-cache-4.6
      paths:
        - ${APK_CACHE_DIR}
  image: docker:23.0.6-dind
  needs:
    - job_docker_test
  only:
    - releases/all/minor
    - releases/docker/minor
  script:
    - DOCKER_VERSION=`cat docker/rootfs/version`
    - docker pull "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}"
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" registry-1.docker.io/mayanedms/mayanedms:v"${DOCKER_VERSION}"
    - MINOR_VERSION=$(${PYTHON_BIN} ${VERSION_SCRIPT_BIN} ${DOCKER_VERSION} minor);
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" registry-1.docker.io/mayanedms/mayanedms:s"${MINOR_VERSION}"
    - docker login --username "${DOCKER_HUB_USERNAME}" --password "${DOCKER_HUB_PASSWORD}" https://registry-1.docker.io
    - docker push registry-1.docker.io/mayanedms/mayanedms:v"${DOCKER_VERSION}"
    - docker push registry-1.docker.io/mayanedms/mayanedms:s"${MINOR_VERSION}"
  services:
    - docker:23.0.6-dind
  stage: stage_push
  variables:
    DOCKER_DRIVER: overlay2
    APK_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apk
    << : *job_docker_push_variables

job_docker_nightly:
  before_script:
    - set -a && . ./config.env && set +a
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  image: docker:23.0.6-dind
  needs:
    - job_docker_build
  only:
    - releases/nightly
  script:
    - DOCKER_VERSION=`cat docker/rootfs/version`
    - docker pull "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}"
    - docker login --username "${DOCKER_HUB_USERNAME}" --password "${DOCKER_HUB_PASSWORD}" https://registry-1.docker.io
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" "registry-1.docker.io/mayanedms/mayanedms:${CI_COMMIT_REF_SLUG}"
    - docker push "registry-1.docker.io/mayanedms/mayanedms:${CI_COMMIT_REF_SLUG}"
  services:
    - docker:23.0.6-dind
  stage: stage_push
  variables:
    DOCKER_DRIVER: overlay2

job_docker_testing:
  before_script:
    - set -a && . ./config.env && set +a
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  image: docker:23.0.6-dind
  needs:
    - job_docker_test
  only:
    - releases/testing
  script:
    - DOCKER_VERSION=`cat docker/rootfs/version`
    - docker pull "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}"
    - docker login --username "${DOCKER_HUB_USERNAME}" --password "${DOCKER_HUB_PASSWORD}" https://registry-1.docker.io
    - docker tag "${CI_REGISTRY_IMAGE}:${DOCKER_VERSION}" "registry-1.docker.io/mayanedms/mayanedms:t${DOCKER_VERSION}"
    - docker push "registry-1.docker.io/mayanedms/mayanedms:t${DOCKER_VERSION}"
  services:
    - docker:23.0.6-dind
  stage: stage_push
  variables:
    DOCKER_DRIVER: overlay2

# Documentation

job_documentation_build:
  artifacts:
    expire_in: 4 hr
    paths:
    - docs
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - apt-get install --yes --no-install-recommends enchant-2 gcc make libcairo2-dev libffi-dev libjpeg-dev libldap2-dev libpng-dev libsasl2-dev python3-venv python3-dev zlib1g-dev
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install pip==${PYTHON_PIP_VERSION}
    - pip install wheel==${PYTHON_WHEEL_VERSION}
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
    - key: pip-cache-4.6
      paths:
        - ${PIP_CACHE_DIR}
  image: debian:12.5-slim
  only:
    - builds/documentation
    - releases/all/major
    - releases/documentation
    - tests/all
  script:
    - pip install --requirement requirements/common.txt
    - pip install --requirement requirements/base.txt
    - pip install --requirement requirements/documentation.txt
    - pip install --requirement requirements/documentation_override.txt
    - cd docs
    - make html
  stage: stage_build_documentation
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

job_documentation_push:
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - mkdir --parents ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${DOCUMENTATION_SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - 'which ssh-agent || ( apt-get update --yes && apt-get install --yes --no-install-recommends openssh-client rsync )'
    - eval $(ssh-agent -s)
    - echo "${DOCUMENTATION_SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
    - key: pip-cache-4.6
      paths:
        - ${PIP_CACHE_DIR}
  image: debian:12.5-slim
  only:
    - releases/all/major
    - releases/documentation
  script:
    - ssh ${DOCUMENTATION_SSH_USERNAME}@${DOCUMENTATION_HOSTNAME} "rm -Rf ${DOCUMENTATION_SERVER_PATH}/*"
    - rsync -avzP --progress -e ssh docs/_build/html/* ${DOCUMENTATION_SSH_USERNAME}@${DOCUMENTATION_HOSTNAME}:${DOCUMENTATION_SERVER_PATH}
  stage: stage_push
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

# Python

job_python_build:
  artifacts:
    expire_in: 4 hr
    paths:
    - dist
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - apt-get update
    - apt-get install --yes --no-install-recommends make python3-venv python3-dev
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install pip==${PYTHON_PIP_VERSION}
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
    - key: pip-cache-4.6
      paths:
        - ${PIP_CACHE_DIR}
  image: debian:12.5-slim
  only:
    - builds/python
    - releases/all/major
    - releases/all/minor
    - releases/python/major
    - releases/python/minor
    - releases/testing
    - tests/all
    - tests/python/all
    - tests/python/upgrade
  script:
    - pip install --requirement requirements/build.txt
    - make python-wheel
  stage: stage_build_python
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

job_python_push_pypi:
  cache:
    paths:
      - .apt
      - .cache/pip
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - apt-get update
    - apt-get install --yes --no-install-recommends make python3-venv python3-dev
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install pip==${PYTHON_PIP_VERSION}
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
    - key: pip-cache-4.6
      paths:
        - ${PIP_CACHE_DIR}
  image: debian:12.5-slim
  only:
    - releases/all/major
    - releases/all/minor
    - releases/python/major
    - releases/python/minor
    - releases/testing
  script:
    - pip install --requirement requirements/build.txt
    - echo "${PYPIRC}" > ~/.pypirc
    - twine upload --verbose dist/* -r pypi
  stage: stage_push
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

# Test upgrade from the latest public version to the local version

.job_base_upgrade_test:
  &job_base_upgrade_test
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - apt-get install --yes --no-install-recommends curl exiftool file gcc ghostscript gnupg1 libldap2-dev libjpeg-dev libmagic1 libpng-dev libsasl2-dev libtiff-dev make poppler-utils python3-venv python3-dev tesseract-ocr
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install pip==${PYTHON_PIP_VERSION}
    - DOCKER_VERSION=`cat docker/rootfs/version`
    - pip install "mayan-edms<${DOCKER_VERSION}"
    - pip install importlib-metadata==4.13.0
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
    - key: pip-cache-4.6
      paths:
        - ${PIP_CACHE_DIR}
  dependencies:
    - job_python_build
  image: debian:12.5-slim
  needs:
    - job_python_build
  only:
    - releases/all/major
    - releases/all/minor
    - releases/docker/major
    - releases/docker/minor
    - releases/python/major
    - releases/python/minor
    - releases/staging
    - tests/all
    - tests/python/all
    - tests/python/upgrade
  stage: stage_test_python
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

job_postgres_upgrade_test:
  << : *job_base_upgrade_test
  script:
    - apt-get install --yes --no-install-recommends libpq-dev
    - pip install psycopg2==${PYTHON_PSYCOPG_VERSION_PREVIOUS}
    - export MAYAN_DATABASES="{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'mayan','PASSWORD':'mayandbpass','USER':'mayan','HOST':'postgres'}}"
    - mayan-edms.py common_initial_setup --no-dependencies
    - echo "from mayan.apps.documents.models.document_type_models import DocumentType;from mayan.apps.documents.tests.literals import TEST_FILE_SMALL_PATH;DocumentType.objects.first().documents_upload(file_object=open(file=TEST_FILE_SMALL_PATH, mode='rb'))" | mayan-edms.py shell
    - pip install --requirement requirements/build.txt --requirement requirements/testing-base.txt
    - pip install psycopg==${PYTHON_PSYCOPG_VERSION}
    - pip install dist/mayan_edms-*.whl
    - mayan-edms.py common_perform_upgrade --no-dependencies
  services:
    - postgres:13.14-alpine
  tags:
    - postgres
  variables:
    POSTGRES_DB: "mayan"
    POSTGRES_PASSWORD: "mayandbpass"
    POSTGRES_USER: "mayan"

job_sqlite_upgrade_test:
  << : *job_base_upgrade_test
  script:
    - mayan-edms.py common_initial_setup --no-dependencies
    - echo "from mayan.apps.documents.models.document_type_models import DocumentType;from mayan.apps.documents.tests.literals import TEST_FILE_SMALL_PATH;DocumentType.objects.first().documents_upload(file_object=open(file=TEST_FILE_SMALL_PATH, mode='rb'))" | mayan-edms.py shell
    - pip install --requirement requirements/build.txt --requirement requirements/testing-base.txt
    - pip install dist/mayan_edms-*.whl
    - mayan-edms.py common_perform_upgrade --no-dependencies

# Run the test suit

.job_base_test:
  &job_base_test
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - apt-get install --yes --no-install-recommends curl exiftool file gcc ghostscript gnupg1 graphviz libfuse2 libldap2-dev libjpeg-dev libmagic1 libpng-dev libreoffice-calc-nogui libreoffice-draw-nogui libreoffice-impress-nogui libreoffice-math-nogui libreoffice-writer-nogui libsasl2-dev libtiff-dev make poppler-utils python3-venv python3-dev sane-utils tesseract-ocr tesseract-ocr-deu
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install pip==${PYTHON_PIP_VERSION}
    - pip install --requirement requirements.txt --requirement requirements/testing-base.txt --requirement requirements/build.txt
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
    - key: pip-cache-4.6
      paths:
        - ${PIP_CACHE_DIR}
  image: debian:12.5-slim
  only:
    - releases/all/major
    - releases/all/minor
    - releases/docker/major
    - releases/docker/minor
    - releases/python/major
    - releases/python/minor
    - releases/staging
    - tests/all
    - tests/python/all
    - tests/python/base
  stage: stage_test_python
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip

job_postgres_test:
  << : *job_base_test
  script:
    - apt-get install --yes --no-install-recommends libpq-dev
    - . venv/bin/activate
    - pip install psycopg==${PYTHON_PSYCOPG_VERSION}
    - export MAYAN_DATABASES="{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'mayan','PASSWORD':'mayandbpass','USER':'mayan','HOST':'postgres'}}"
    - make test-all SETTINGS=mayan.settings.testing.gitlab-ci
    - make test-migrations-all SETTINGS=mayan.settings.testing.gitlab-ci
  services:
    - postgres:13.14-alpine
  tags:
    - postgres
  variables:
    POSTGRES_DB: "mayan"
    POSTGRES_PASSWORD: "mayandbpass"
    POSTGRES_USER: "mayan"

job_sqlite_test:
  << : *job_base_test
  script:
    - . venv/bin/activate
    - make test-all SETTINGS=mayan.settings.testing.gitlab-ci
    - make test-migrations-all SETTINGS=mayan.settings.testing.gitlab-ci

# Deploy

job_demo_deploy:
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - mkdir --parents ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${DEMO_SSH_KNOWN_HOST}" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - 'which ssh-agent || ( apt-get update --yes && apt-get install --yes --no-install-recommends openssh-client rsync )'
    - eval $(ssh-agent -s)
    - echo "${DEMO_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
  environment:
    name: demo
  image: debian:12.5-slim
  only:
    - builds/docker
    - deployments/demo
    - releases/all/major
    - releases/all/minor
    - releases/docker/major
    - releases/docker/minor
    - releases/nightly
    - releases/staging
  script:
    - ssh ${DEMO_USERNAME}@${DEMO_IP_ADDRESS} "docker compose down --remove-orphans --volumes || true"
    - ssh ${DEMO_USERNAME}@${DEMO_IP_ADDRESS} "curl --remote-name https://gitlab.com/mayan-edms/mayan-edms/-/raw/master/docker/docker-compose.yml --show-error --silent"
    - ssh ${DEMO_USERNAME}@${DEMO_IP_ADDRESS} "curl --remote-name https://gitlab.com/mayan-edms/mayan-edms/-/raw/master/docker/.env --show-error --silent"
    - ssh ${DEMO_USERNAME}@${DEMO_IP_ADDRESS} "docker compose pull"
    - ssh ${DEMO_USERNAME}@${DEMO_IP_ADDRESS} "docker compose up --detach"
  stage: stage_deploy
  when: manual
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt

job_staging_deploy:
  before_script:
    - set -a && . ./config.env && set +a
    - export APT_STATE_LISTS=${APT_CACHE_DIR}/lists && export APT_CACHE_ARCHIVES=${APT_CACHE_DIR}/archives
    - mkdir --parents "${APT_STATE_LISTS}/partial" && mkdir --parents "${APT_CACHE_ARCHIVES}/partial"
    - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf.d/99gitlab-ci-cache
    - if [ "${APT_PROXY}" ]; then echo "Acquire::http { Proxy \"http://${APT_PROXY}\"; };" > /etc/apt/apt.conf.d/01proxy; fi
    - apt-get update
    - mkdir --parents ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${STAGING_SSH_KNOWN_HOST}" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - 'which ssh-agent || ( apt-get update --yes && apt-get install --yes --no-install-recommends openssh-client rsync )'
    - eval $(ssh-agent -s)
    - echo "${STAGING_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
  cache:
    - key: apt-cache-4.6
      paths:
        - ${APT_CACHE_DIR}
  environment:
    name: staging
  image: debian:12.5-slim
  only:
    - builds/docker
    - deployments/staging
    - releases/all/major
    - releases/all/minor
    - releases/docker/major
    - releases/docker/minor
    - releases/nightly
    - releases/staging
  script:
    - ssh ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME} "docker compose down --remove-orphans --volumes || true"
    - scp docker/docker-compose.yml ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME}:~
    - scp docker/.env ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME}:~
    - DOCKER_VERSION=`cat docker/rootfs/version`;
    - ssh ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME} "echo \"MAYAN_DOCKER_IMAGE_NAME=${CI_REGISTRY_IMAGE}\" >> .env"
    - ssh ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME} "echo \"MAYAN_DOCKER_IMAGE_TAG=${DOCKER_VERSION}\" >> .env"
    - ssh ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME} "docker login --username '${CI_REGISTRY_USER}' --password '${CI_REGISTRY_PASSWORD}' ${CI_REGISTRY}"
    - ssh ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME} "docker compose pull"
    - ssh ${STAGING_SSH_USERNAME}@${STAGING_HOSTNAME} "docker compose up --detach"
  stage: stage_deploy
  when: manual
  variables:
    APT_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/apt
